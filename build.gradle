buildscript {
	repositories {
		maven {
			url = 'https://maven.minecraftforge.net'
		}
		maven {
			url = 'https://maven.parchmentmc.org'
		}
		maven {
			url = 'https://repo.spongepowered.org/repository/maven-public'
		}
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath 'org.parchmentmc:librarian:1.+'
		classpath 'org.spongepowered:mixingradle:0.7.+'
	}
}

plugins {
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

sourceSets {
//	data {
//		compileClasspath += sourceSets.main.compileClasspath
//		runtimeClasspath += sourceSets.main.compileClasspath
//	}
}

configurations {
	shade
	implementation.extendsFrom shade
}

build.dependsOn shadowJar

version = "${minecraft_version}-${mod_version}"
group = mod_base_package
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	// snapshot   YYYYMMDD          Snapshots are built nightly.
	// stable     #                 Stables are built at the discretion of the MCP team.
	// official   MCVersion         Official field/method names from Mojang mapping files
	// parchment  YYYY.MM.DD-MCVer  Javadocs and parameters layered on top of Mojmaps from the ParchmentMC team.
	mappings channel: mappings_channel, version: mappings_version

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Run configurations
	runs {
		client {
			workingDirectory project.file('run')
			// "SCAN": mod scan, "REGISTRIES": reg events, "REGISTRYDUMP": reg contents
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			// These arguments allow for optional authentication with Mojang servers.
			// If you want to authenticate, put these properties in GRADLE_HOME/gradle.properties.
			// By default, this is C:\Users\<your username>\.gradle\gradle.properties on Windows or ~/.gradle/gradle.properties on Linux/MacOS.
			if (project.hasProperty('mc_uuid')) {
				args '--uuid', project.getProperty('mc_uuid')
			}
			if (project.hasProperty('mc_username')) {
				args '--username', project.getProperty('mc_username')
			}
			if (project.hasProperty('mc_accessToken')) {
				// Your current access token. When it expires, you need to retrieve a new one and regenerate your run configurations.
				// You may be able to find it in your .minecraft folder in launcher_accounts.json or launcher_profiles.json.
				args '--accessToken', project.getProperty('mc_accessToken')
			}

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				"${mod_id}" {
					source sourceSets.main
//					source sourceSets.data
				}
			}
		}
	}
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}

repositories {
	// Put repositories for dependencies here
	// ForgeGradle automatically adds the Forge maven and Maven Central for you

  maven {
		// jei
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		// jei mirror
		name = "ModMaven"
		url = "https://modmaven.dev"
	}

	maven { url 'https://maven.blamejared.com' }

	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }

	maven {
		// Registrate
		url "https://maven.tterrag.com/"
	}
	mavenLocal()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	annotationProcessor "org.spongepowered:mixin:${mixin_ap_version}:processor"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

	implementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${ie_version}")

    shade fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

	// data
	// dataImplementation sourceSets.main.output
}

mixin {
	add sourceSets.main, 'mixins.${mod_id}.refmap.json'
	config "mixins.${mod_id}.json"

	debug.verbose = true
	debug.export = true
	dumpTargetOnFailure = true
}

// expand gradle proprties in specified targets
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_name: mod_name, mod_version: mod_version,
	mod_authors: mod_authors, mod_description: mod_description,
	minecraft_version_range: minecraft_version_range, forge_version_range: forge_version_range,
	loader_version_range: loader_version_range, ie_version: ie_version, jei_version: jei_version
]
processResources {
	inputs.properties replaceProperties
	replaceProperties.put 'project', project

	filesMatching(resourceTargets) {
		expand replaceProperties
	}

	intoTargets.each {
		target ->
			if (file(target).exists()) {
				copy {
					from(sourceSets.main.resources) {
						include resourceTargets
						expand replaceProperties
					}
					into target
				}
			}
	}
}

jar {
	archiveClassifier = 'slim'
	manifest {
		attributes([
			'Specification-Title': mod_id,
			'Specification-Vendor': mod_authors,
			'Specification-Version': '1', // We are version 1 of ourselves
			'Implementation-Title': project.name,
			'Implementation-Version': mod_version,
			'Implementation-Vendor': mod_authors,
			'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
		])
	}
}

shadowJar {
	archiveClassifier = ''
	configurations = [project.configurations.shade]
	relocate 'com.tterrag.registrate', "${project.group}.repack.registrate"
	finalizedBy 'reobfShadowJar'
}

reobf {
	shadowJar {}
}

tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/mcmodsrepo"
		}
	}
}
